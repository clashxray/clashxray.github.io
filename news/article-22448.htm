<!DOCTYPE html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashxray.github.io/news/article-22448.htm" />
    <!-- Title of The Page -->
    <title>Spring Boot 2.3.x 分层构建 Docker 镜像实战</title>
        <meta name="description" content="一、什么是镜像分层 二、SpringBoot 2.3.x 新增对分层的支持 三、创建测试的 SpringBoot 应用  1、Maven 中引入相关依赖和插件 2、创建测试的 Controller 类" />
        <link rel="icon" href="/assets/website/img/clashxray/favicon.ico" type="image/x-icon"/>
    <!-- Meta Informations -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <!-- Web Font -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/webfont.css">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/bootstrap.min.css">
    <!-- Bootstrap-Theme CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/bootstrap-theme.min.css">
    <!-- Fontawesome CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/fontawesome.min.css">
    <!-- Slick CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/slicknav.min.css">
    <!-- Animate CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/animate.min.css">
    <!-- Magnific-Popup CSS-->
    <link rel="stylesheet" href="/assets/website/css/clashxray/magnific-popup.css">
    <!-- Animate-Text CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/animate-text.css">
    <!-- Carousel CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/owl.carousel.min.css">
    <!-- Them Default CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/owl.theme.default.min.css">
    <!-- Normalize CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/normalize.css">
    <!-- Style CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/style.css">
    <!-- Responsive CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashxray/responsive.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-33PT2E497X"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-33PT2E497X');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Preloader -->
    <div class="preeloader">
        <div class="preloader-spinner"></div>
    </div>
    <!-- End Preloader -->
    <div id="particles-js"><canvas class="particles-js-canvas-el" width="1474" height="880" style="width: 100%; height: 100%;"></canvas></div>
    <!-- Header Area -->
    <header class="header">
        <!-- Middle Header -->
        <div class="middle-header">
            <div class="container">
                <div class="row">
                    <div class="col-md-3 col-sm-3 col-xs-12">
                        <!-- Logo -->
                        <div class="logo">
                                                        <a href="/">
                                <span>Clash Xray</span>
                            </a>
                                                    </div>
                        <!--/ End Logo -->
                        <div class="mobile-nav"></div>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Middle Header -->
        <!-- Header Inner -->
        <div class="main-menu">
            <div class="container">
                <div class="row">
                    <div class="col-md-12 col-sm-12">
                        <nav class="navbar navbar-default">
                            <div class="collapse navbar-collapse">
                                <ul id="nav" class="nav mobile-menu navbar-nav">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/free-nodes/">免费节点</a></li>
                                                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                        <li><a href="/news/">新闻资讯</a></li>
                                                                        <li><a href="#">关于</a></li>
                                    <li><a href="#">联系</a></li>
                                </ul>
                            </div>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
        <!--/ End Header Inner -->
    </header>
    <!-- End Header Area -->
    <!-- Breadcrumbs -->
    <div class="breadcrumbs overlay">
        <div class="container">
            <div class="row">
                <div class="bread-inner">
                    <div class="col-xs-12">
                        <h1 class="col-xs-8">Spring Boot 2.3.x 分层构建 Docker 镜像实战</h1>
                        <ul class="bread-list">
                            <li><a href="/">首页<i class="fas fa-chevron-right"></i></a></li>
                            <li><a href="/news/">新闻资讯<i class="fas fa-chevron-right"></i></a></li>
                            <li class="active">正文</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- End Breadcrumbs -->
    <!-- About Us -->
    <section class="about section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> </h1> <p>一、什么是镜像分层</p> <p>二、SpringBoot 2.3.x 新增对分层的支持</p> <p>三、创建测试的 SpringBoot 应用</p> <ul> <li>1、Maven 中引入相关依赖和插件</li> <li>2、创建测试的 Controller 类</li> <li>3、创建 SpringBoot 启动类</li> </ul> <p>四、创建两种构建镜像的 Dockerfile 脚本</p> <ul> <li>1、普通镜像构建脚本文件 dockerfile-normal</li> <li>2、分层镜像构建脚本文件 dockerfile-layer</li> </ul> <p>五、使用两种 Dockerfile 构建项目镜像</p> <ul> <li>1、在服务器一构建普通 Docker 镜像</li> <li>2、在服务器二构建分层 Docker 镜像</li> </ul> <p>六、镜像推送到镜像仓库测试</p> <ul> <li>1、推送镜像到镜像仓库测试</li> <li>2、镜像仓库拉取镜像测试</li> </ul> <p>七、镜像构建、推送、拉取时间汇总</p> <ul> <li>1、不使用分层构建镜像</li> <li>2、使用分层构建镜像</li> <li>3、总结</li> </ul> <p><strong>系统环境：</strong></p> <ul> <li>Docker 版本：19.03.13</li> <li>Open JDK 基础镜像版本：openjdk:8u275</li> <li>私有的 Harbor 镜像仓库：自建 Harbor 私库</li> <li>项目 Github：SpringBoot 2.3.x 分层构建 Docker 镜像示例</li> </ul> <p>作者：超级小豆丁，链接：www.mydlq.club/article/98/</p> <h2><a id="_44" rel="nofollow"></a><strong>一、什么是镜像分层</strong></h2> <p><strong>镜像的构成</strong></p> <p>现在一谈起镜像大部分都是指 Docker 引擎构建的镜像，一般 Docker 镜像是由很多层组成，底层是操作系统，然后在其之上是基础镜像或者用户自定义 Dockerfile 脚本中定义的中间层。其中镜像在构建完成后，用户只能对镜像进行读操作，而不能进行写操作，只有镜像启动后变为容器，才能进行读写操作。镜像整体结构，可以观看下图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/4910a98c39c86eb6eaad8f08e9500141.jpg" alt="Spring Boot 2.3.x 分层构建 Docker 镜像实战"></p> <p>该图中展示了镜像的基本组成，但是图中这一个个中间层是什么呢？要想了解这些层具体是什么，那得知道如何构建 Docker 镜像了。平时我们构建 Docker 镜像时候，都是编写 Dockerfile 脚本，然后使用 Docker 镜像构建命令，按照脚本一行行执行构建。</p> <p>PS：更多 Docker 和 Spring Boot 的文章可以关注微信公众号「Java后端」回复「666」下载技术栈手册。</p> <p>如下就是一个 Dockerfile 脚本，脚本内容就构建 Java 项目镜像常用的 Dockerfile 命令：</p> <pre><code class="prism language-go">FROM openjdk<span class="token punctuation">:</span><span class="token number">8</span>u275 VOLUME<span class="token operator">/</span>tmp ADD target<span class="token comment">/*.jar app.jar ENV TZ="Asia/Shanghai" ENV JAVA_OPTS="" ENV JVM_OPTS="-XX:MaxRAMPercentage=80.0" ENTRYPOINT ["sh","-c","java $JVM_OPTS $JAVA_OPTS -jar /app.jar"]</span></code></pre> <p>有了 Dockerfile 脚本，我们需要执行 Docker 的构建镜像命令对执行 Dockerfile 脚本构建镜像，其中构建镜像的过程如下：</p> <pre><code class="prism language-go">## 构建镜像的命令 $ docker build<span class="token operator">-</span>t java<span class="token operator">-</span>test<span class="token punctuation">:</span>latest<span class="token punctuation">.</span>    ## 命令执行的过程 Step<span class="token number">1</span><span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">:</span> FROM openjdk<span class="token punctuation">:</span><span class="token number">8</span>u275<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token number">82</span>f24ce79de6 Step<span class="token number">2</span><span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">:</span> VOLUME<span class="token operator">/</span>tmp<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> Running in a6361fdfc193 Removing intermediate container a6361fdfc193<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> a43948bf1b98 Step<span class="token number">3</span><span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">:</span> ADD target<span class="token comment">/*.jar app.jar  ---&gt; 18f4bc60818f Step 4/7 : ENV TZ="Asia/Shanghai"  ---&gt; Running in cc738aa5865b Removing intermediate container cc738aa5865b  ---&gt; 538adb85609e Step 5/7 : ENV JAVA_OPTS=""  ---&gt; Running in f8b635d32b2b Removing intermediate container f8b635d32b2b  ---&gt; 34e7a8cd7b6e Step 6/7 : ENV JVM_OPTS="-XX:MaxRAMPercentage=80.0"  ---&gt; Running in 9331cb6e443e Removing intermediate container 9331cb6e443e  ---&gt; 232b9c6c1d29 Step 7/7 : ENTRYPOINT ["sh","-c","java $JVM_OPTS $JAVA_OPTS -jar /app.jar" ]  ---&gt; Running in c3a24fba3a10 Removing intermediate container c3a24fba3a10  ---&gt; a41974d5f0e3</span></code></pre> <p>可以看到总共存在 7 个构建步骤，每步都与 Dockerfile 里面一行指令对应。样子和下图相似：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/6e545de04105eb3f2164a3dce2ae8aa5.jpg" alt="Spring Boot 2.3.x 分层构建 Docker 镜像实战"></p> <p>如果这时候，我们改变原来 Dockerfile 内容，创建一个新的镜像，其 Dockerfile 如下：</p> <pre><code class="prism language-go">FROM openjdk<span class="token punctuation">:</span><span class="token number">8</span>u275 VOLUME<span class="token operator">/</span>tmp ADD target<span class="token comment">/*.jar app.jar ENV TZ="Asia/Macao"                  #与原来 Dockerfile 不同 ENV JVM_OPTS="-Xmx512m -Xss256k"     #与原来 Dockerfile 不同 ENTRYPOINT ["sh","-c","java $JVM_OPTS $JAVA_OPTS -jar /app.jar" ]</span></code></pre> <p>执行 Docker 命令构建镜像：</p> <pre><code class="prism language-go">$ docker build<span class="token operator">-</span>t java<span class="token operator">-</span>test2<span class="token punctuation">:</span>latest<span class="token punctuation">.</span>   Step<span class="token number">1</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">:</span> FROM openjdk<span class="token punctuation">:</span><span class="token number">8</span>u275<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token number">82</span>f24ce79de6 Step<span class="token number">2</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">:</span> VOLUME<span class="token operator">/</span>tmp<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> Using cache<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> a43948bf1b98 Step<span class="token number">3</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">:</span> ADD target<span class="token comment">/*.jar app.jar  ---&gt; Using cache  ---&gt; 18f4bc60818f Step 4/6 : ENV TZ="Asia/Macao"  ---&gt; Running in fd98b90a5485 Removing intermediate container fd98b90a5485  ---&gt; afab3fcdab07 Step 5/6 : ENV JVM_OPTS="-Xmx512m -Xss256k"  ---&gt; Running in 19a99576fba9 Removing intermediate container 19a99576fba9  ---&gt; 4eeab7d7c720 Step 6/6 : ENTRYPOINT ["sh","-c","java $JVM_OPTS $JAVA_OPTS -jar /app.jar" ]  ---&gt; Running in 2dba72e1eef4 Removing intermediate container 2dba72e1eef4  ---&gt; 7c706ecf7698</span></code></pre> <p>可以观察到执行过程中，从一开始执行的构建步骤中显示，并没有生成新的中间层镜像，而是直接使用了已经存在的缓存镜像。直至 4⁄6这部中，由于新的 Dockerfile 与原来 Dockerfile 发生变动，所以这部中间层镜像直接是新创建的，并没有使用缓存中间层镜像。</p> <p>然后往下观察，发现之后的全部构建都是新创建的中间层镜像，即是脚本最后的一行和原来相同，也没有使用缓存中间层镜像。</p> <p>上面现象说明，Docker 镜像在构建过程中按照 Dockerfile 自上往下的执行顺序中，如果从最上层开始，其脚本内容和已有的缓存中间层镜像内容一致，就会引入缓存中的中间层镜像（并不是直接复制缓存镜像，而是引入镜像文件地址，多个镜像共享这些中间层镜像）。但是，如果执行过程中中间任意一行镜像构建的内容发生变化，那么当前行和之后的全部行在执行时就不会使用缓存中的中间层镜像，而是全部创建新的镜像。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/015aa74c842a9809268089a26957e779.jpg" alt="Spring Boot 2.3.x 分层构建 Docker 镜像实战"></p> <p>这就是 Docker 镜像中缓存中间层镜像的复用，学会使用缓存构建镜像将大大减少存储空间的占用以及镜像的构建的构建速度，镜像的缓存不仅仅体现在镜像的构建上，在执行”镜像推送”、”镜像拉取”操作时都能观察到其的好处。</p> <ul> <li><strong>镜像缓在镜像推送的体现：</strong> 如镜像推送时候，也是将镜像整体构成的中间层镜像并行推送到镜像仓库，如果镜像仓库中已经存某个中间层镜像，那么推送过程就不会再次将该层镜像推送到镜像仓库，而是将仓库中并不存在中间层镜像推送到其中。</li> <li><strong>镜像缓存在镜像拉取的体现：</strong> 在拉取镜像时候，如果本地某个大镜像的中间层镜像的组成中，已经包含新拉取镜像的中间层部分镜像，那么将直接复用本地已经镜像的中间层镜像，不必再将其进行拉取，而本地不存在的中间层镜像将会被继续拉取。</li> </ul> <p>说了这么多，相信大家已经对镜像缓存的使用有了初步了解，那么再谈及为什么需要镜像分层就很好解释，其原因就是 Docker 想提高资源的复用率，将一个大镜像拆分成很多层小镜像组成，以达到镜像中间层的复用的目的。</p> <h2><a id="SpringBoot_23x__158" rel="nofollow"></a><strong>二、SpringBoot 2.3.x 新增对分层的支持</strong></h2> <p>SpringBoot 2.3.x 以后支持分层打包应用，需要 Pom.xml 中引入 SpringBoot 2.3.x 后的父依赖和使用 SpringBoot 打包插件<code>spring-boot-maven-plugin</code>，并且开启<code>layers</code> 功能，然后执行 Maven 编译源码构建 Jar 包，使用该 Jar 包就可以构建基于分层模式的 Docker 镜像：</p> <p>项目 pom.xml 中引入 SpringBoot 2.3.x 依赖：</p> <pre><code class="prism language-go"><span class="token operator">&lt;</span>parent<span class="token operator">&gt;</span><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span>relativePath<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">&gt;</span></code></pre> <p>项目 pom.xml 中引入 spring-boot-maven-plugin 打包插件，并且开启分层功能：</p> <pre><code class="prism language-go"><span class="token operator">&lt;</span>build<span class="token operator">&gt;</span><span class="token operator">&lt;</span>plugins<span class="token operator">&gt;</span><span class="token operator">&lt;</span>plugin<span class="token operator">&gt;</span><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>configuration<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>开启分层编译支持<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>layers<span class="token operator">&gt;</span><span class="token operator">&lt;</span>enabled<span class="token operator">&gt;</span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>enabled<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>layers<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>build<span class="token operator">&gt;</span></code></pre> <p>执行 Maven 命令，构建分层的 JAR 包，命令和平时的 Maven 构建命令相同：</p> <pre><code class="prism language-go">$ mvn install</code></pre> <p>观察 Jar 结构，可以看到里面多了<code>classpath.idx</code> 与<code>layers.idx</code> 两个文件：</p> <ul> <li><strong>classpath.idx：</strong> 文件列出了依赖的 jar 包列表，到时候会按照这个顺序载入。</li> <li><strong>layers.idx：</strong> 文件清单，记录了所有要被复制到 Dokcer 镜像中的文件信息。</li> </ul> <p>根据官方介绍，在构建 Docker 镜像前需要从 Jar 中提起出对应的分层文件到 Jar 外面，可用使用下面命令列出可以从分层 Jar 中提取出的文件夹信息：</p> <pre><code class="prism language-go">$ java<span class="token operator">-</span>Djarmode<span class="token operator">=</span>layertools<span class="token operator">-</span>jar target<span class="token operator">/</span>springboot<span class="token operator">-</span>layer<span class="token operator">-</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token punctuation">.</span>jar list</code></pre> <p>可用该看到以下输出，下面的内容就是接下来使用分层构建后，生成的 Jar 提取出对应资源后的结构：</p> <pre><code class="prism language-go">dependencies spring<span class="token operator">-</span>boot<span class="token operator">-</span>loader snapshot<span class="token operator">-</span>dependencies application</code></pre> <p>上面即是使用分层工具提取 Jar 的内容后生成的文件夹，其中各个文件夹作用是：</p> <ul> <li><strong>dependencies：</strong> 存储项目正常依赖 Jar 的文件夹。</li> <li><strong>snapshot-dependencies：</strong> 存储项目快照依赖 Jar 的文件夹。</li> <li><strong>resources：</strong> 用于存储静态资源的文件夹。</li> <li><strong>application：</strong> 用于存储应用程序类相关文件的文件夹。</li> </ul> <h2><a id="_SpringBoot__225" rel="nofollow"></a><strong>三、创建测试的 SpringBoot 应用</strong></h2> <p>创建测试的 SpringBoot 项目，并且在 pom.xml 中开启镜像分层。</p> <h3><a id="1Maven__229" rel="nofollow"></a>1、Maven 中引入相关依赖和插件</h3> <pre><code class="prism language-go"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">&gt;</span><span class="token operator">&lt;</span>project xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0"</span>          xmlns<span class="token punctuation">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>          xsi<span class="token punctuation">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>modelVersion<span class="token operator">&gt;</span><span class="token number">4.0</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>modelVersion<span class="token operator">&gt;</span><span class="token operator">&lt;</span>parent<span class="token operator">&gt;</span><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">2.3</span><span class="token number">.6</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>springboot<span class="token operator">-</span>dockerfile<span class="token operator">-</span>layer<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>packaging<span class="token operator">&gt;</span>jar<span class="token operator">&lt;</span><span class="token operator">/</span>packaging<span class="token operator">&gt;</span><span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>springboot<span class="token operator">-</span>dockerfile<span class="token operator">-</span>layer<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span><span class="token operator">&lt;</span>description<span class="token operator">&gt;</span>springboot build layer example<span class="token operator">&lt;</span><span class="token operator">/</span>description<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependencies<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">&gt;</span><span class="token operator">&lt;</span>build<span class="token operator">&gt;</span><span class="token operator">&lt;</span>plugins<span class="token operator">&gt;</span><span class="token operator">&lt;</span>plugin<span class="token operator">&gt;</span><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>configuration<span class="token operator">&gt;</span><span class="token operator">&lt;</span>layers<span class="token operator">&gt;</span><span class="token operator">&lt;</span>enabled<span class="token operator">&gt;</span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>enabled<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>layers<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>build<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token operator">&gt;</span></code></pre> <h3><a id="2_Controller__273" rel="nofollow"></a>2、创建测试的 Controller 类</h3> <pre><code class="prism language-go"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>   @RestController public class TestController<span class="token punctuation">{<!-- --></span>       @<span class="token function">GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>     public String<span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"hello world!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h3><a id="3_SpringBoot__290" rel="nofollow"></a>3、创建 SpringBoot 启动类</h3> <pre><code class="prism language-go"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>   @SpringBootApplication public class Application<span class="token punctuation">{<!-- --></span>       public static void<span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>class<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h2><a id="_Dockerfile__306" rel="nofollow"></a><strong>四、创建两种构建镜像的 Dockerfile 脚本</strong></h2> <p>为了方便体现出 SpringBoot 2.3.x 支持的分层构建 Dockerfile 的优点，这里在 Java 源码文件夹下，创建普通与分层两种构建镜像的 Dockerfile 脚本，后续会使用这两种脚本构建 Docker 镜像进行构建速度、推送速度、拉取速度的对比。</p> <h3><a id="1_dockerfilenormal_310" rel="nofollow"></a>1、普通镜像构建脚本文件 dockerfile-normal</h3> <pre><code class="prism language-go">FROM openjdk<span class="token punctuation">:</span><span class="token number">8</span>u275 VOLUME<span class="token operator">/</span>tmp ADD target<span class="token comment">/*.jar app.jar RUN sh -c 'touch /app.jar' ENV TZ="Asia/Shanghai" RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone ENV JVM_OPTS="-XX:MaxRAMPercentage=80.0" ENV JAVA_OPTS="" ENTRYPOINT [ "sh", "-c", "java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar $APP_OPTS" ]</span></code></pre> <p><strong>说明：</strong></p> <ul> <li><strong>TZ：</strong> 时区设置，而 Asia/Shanghai 表示使用中国上海时区。</li> <li><strong>JVM_OPTS：</strong> 指定 JVM 启动时候的参数，-XX:MaxRAMPercentage 参数和 -Xmx 类似，都是限制堆内存大小，只不过 -Xmx 需要手动指定限制大小，而 -XX:MaxRAMPercentage 则是根据虚拟机可用内存百分比限制。</li> <li><strong>JAVA_OPTS：</strong> 在镜像启动时指定的自定义 Java 参数，例如 -Dspring.application.name=xxx。</li> </ul> <h3><a id="2_dockerfilelayer_330" rel="nofollow"></a>2、分层镜像构建脚本文件 dockerfile-layer</h3> <pre><code class="prism language-go">FROM openjdk<span class="token punctuation">:</span><span class="token number">8</span>u275 as builder WORKDIR application COPY target<span class="token comment">/*.jar application.jar RUN java -Djarmode=layertools -jar application.jar extract FROM openjdk:8u275 WORKDIR application COPY --from=builder application/dependencies/ ./ COPY --from=builder application/snapshot-dependencies/ ./ COPY --from=builder application/spring-boot-loader/ ./ COPY --from=builder application/application/ ./ ENV TZ="Asia/Shanghai" RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; echo $TZ &gt; /etc/timezone ENV JVM_OPTS="-XX:MaxRAMPercentage=80.0" ENV JAVA_OPTS="" ENTRYPOINT ["sh","-c","java $JVM_OPTS $JAVA_OPTS org.springframework.boot.loader.JarLauncher"]</span></code></pre> <p><strong>说明：</strong></p> <ul> <li><strong>TZ：</strong> 时区设置，而 Asia/Shanghai 表示使用中国上海时区。</li> <li><strong>-Djarmode=layertools：</strong> 指定构建 Jar 的模式。</li> <li><strong>extract：</strong> 从 Jar 包中提取构建镜像所需的内容。</li> <li><strong>-from=builder</strong> 多级镜像构建中，从上一级镜像复制文件到当前镜像中。</li> </ul> <h2><a id="_Dockerfile__357" rel="nofollow"></a><strong>五、使用两种 Dockerfile 构建项目镜像</strong></h2> <h3><a id="1_Docker__359" rel="nofollow"></a>1、在服务器一构建普通 Docker 镜像</h3> <p><strong>(1) 第一次构建</strong></p> <pre><code class="prism language-go">## 执行 Maven 命令，将源代码构建 Jar 包 $ mvn clean install   ## 构建 SpringBoot 应用的 Docker 镜像 $ time docker build<span class="token operator">-</span>t hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token punctuation">.</span></code></pre> <p>Docker 镜像构建总共花费 24.98s 时间。</p> <p><strong>(2) 第二次构建（修改依赖 pom.xml 文件）</strong></p> <pre><code class="prism language-go">## 修改 pom<span class="token punctuation">.</span>xml 里面的依赖，随意添加一个新的依赖包，然后再次将源代码构建 Jar 包 $ mvn clean install   ## 构建 SpringBoot 应用的 Docker 镜像 $ time docker build<span class="token operator">-</span>t hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.2</span><span class="token punctuation">.</span></code></pre> <p>Docker 镜像构建总共花费 1.27s 时间。</p> <p><strong>(3) 第三次构建（修改代码内容）</strong></p> <pre><code class="prism language-go">## 修改源代码任意内容后，然后再次将源代码构建 Jar 包 $ mvn clean install   ## 构建 SpringBoot 应用的 Docker 镜像 $ time docker build<span class="token operator">-</span>t hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.3</span><span class="token punctuation">.</span></code></pre> <p>Docker 镜像构建总共花费 1.32s 时间。</p> <h3><a id="2_Docker__397" rel="nofollow"></a>2、在服务器二构建分层 Docker 镜像</h3> <p><strong>(1) 第一次构建</strong></p> <pre><code class="prism language-go">## 执行 Maven 命令，将源代码构建 Jar 包 $ mvn clean install   ## 构建 SpringBoot 应用的 Docker 镜像 $ time docker build<span class="token operator">-</span>t hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token punctuation">.</span></code></pre> <p>Docker 镜像构建总共花费 26.12s 时间。</p> <p><strong>(2) 第二次构建（修改依赖 pom.xml 文件）</strong></p> <pre><code class="prism language-go">## 修改 pom<span class="token punctuation">.</span>xml 里面的依赖，随意添加一个新的依赖包，然后再次将源代码构建 Jar 包 $ mvn clean install   ## 构建 SpringBoot 应用的 Docker 镜像 $ time docker build<span class="token operator">-</span>t hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.2</span><span class="token punctuation">.</span></code></pre> <p><strong>(3) 第三次构建（修改代码内容）</strong></p> <pre><code class="prism language-go">## 修改源代码任意内容后，然后再次将源代码构建 Jar 包 $ mvn clean install   ## 构建 SpringBoot 应用的 Docker 镜像 $ time docker build<span class="token operator">-</span>t hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.3</span><span class="token punctuation">.</span></code></pre> <p>Docker 镜像构建总共花费 2.82s 时间。</p> <h2><a id="_433" rel="nofollow"></a><strong>六、镜像推送到镜像仓库测试</strong></h2> <h3><a id="1_435" rel="nofollow"></a>1、推送镜像到镜像仓库测试</h3> <p>服务器一推送普通镜像到镜像仓库1：</p> <pre><code class="prism language-go">## 第一次推送镜像 $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token builtin">real</span><span class="token number">0</span>m35<span class="token punctuation">.</span><span class="token number">215</span>s   ## 第二次推送镜像 $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.2</span><span class="token builtin">real</span><span class="token number">0</span>m14<span class="token punctuation">.</span><span class="token number">051</span>s   ## 第三次推送镜像 $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.3</span><span class="token builtin">real</span><span class="token number">0</span>m14<span class="token punctuation">.</span><span class="token number">183</span>s</code></pre> <p>服务器二推送分层镜像到镜像仓库2：</p> <pre><code class="prism language-go">## 第一次推送镜像 $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token builtin">real</span><span class="token number">0</span>m34<span class="token punctuation">.</span><span class="token number">121</span>s   ## 第二次推送镜像 $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.2</span><span class="token builtin">real</span><span class="token number">0</span>m13<span class="token punctuation">.</span><span class="token number">605</span>s   ## 第三次推送镜像 $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.3</span><span class="token builtin">real</span><span class="token number">0</span>m4<span class="token punctuation">.</span><span class="token number">805</span>s</code></pre> <h3><a id="2_475" rel="nofollow"></a>2、镜像仓库拉取镜像测试</h3> <p>服务器一推送从镜像仓库1拉取镜像：</p> <pre><code class="prism language-go">## 清理全部镜像 $ docker rm<span class="token operator">--</span>force $<span class="token punctuation">(</span>docker images<span class="token operator">-</span>qa<span class="token punctuation">)</span>   ## 拉取镜像 springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.1</span> $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token builtin">real</span><span class="token number">0</span>m35<span class="token punctuation">.</span><span class="token number">395</span>s   ## 拉取镜像 springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.2</span> $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.2</span><span class="token builtin">real</span><span class="token number">0</span>m6<span class="token punctuation">.</span><span class="token number">501</span>s   ## 拉取镜像 springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.3</span> $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.3</span><span class="token builtin">real</span><span class="token number">0</span>m6<span class="token punctuation">.</span><span class="token number">993</span>s</code></pre> <p>服务器二推送从镜像仓库2拉取镜像：</p> <pre><code class="prism language-go">## 清理全部镜像 $ docker rm<span class="token operator">--</span>force $<span class="token punctuation">(</span>docker images<span class="token operator">-</span>qa<span class="token punctuation">)</span>   ## 拉取镜像 springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.1</span> $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.1</span><span class="token builtin">real</span><span class="token number">0</span>m30<span class="token punctuation">.</span><span class="token number">615</span>s   ## 拉取镜像 springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.2</span> $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.2</span><span class="token builtin">real</span><span class="token number">0</span>m4<span class="token punctuation">.</span><span class="token number">811</span>s   ## 拉取镜像 springboot<span class="token operator">-</span>layer<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.3</span> $ time docker push hub<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>club<span class="token operator">/</span>library<span class="token operator">/</span>springboot<span class="token operator">-</span>normal<span class="token punctuation">:</span><span class="token number">0.0</span><span class="token number">.3</span><span class="token builtin">real</span><span class="token number">0</span>m1<span class="token punctuation">.</span><span class="token number">293</span>s</code></pre> <h2><a id="_521" rel="nofollow"></a><strong>七、镜像构建、推送、拉取时间汇总</strong></h2> <h3><a id="1_523" rel="nofollow"></a>1、不使用分层构建镜像</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/a56f3ede5d0bd5cb68ef29b6be605285.jpg" alt="Spring Boot 2.3.x 分层构建 Docker 镜像实战"></p> <h3><a id="_527" rel="nofollow"></a></h3> <p><strong>如下图：</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/869d996f245da6846259ee2bab0c3389.jpg" alt="Spring Boot 2.3.x 分层构建 Docker 镜像实战"></p> <h3><a id="2_533" rel="nofollow"></a>2、使用分层构建镜像</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/71e0db0d91b79679aca13468fc8f8571.jpg" alt="Spring Boot 2.3.x 分层构建 Docker 镜像实战"></p> <p><strong>如下图：</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/f58842ef6d234de369359c10caf3e1d6.jpg" alt="Spring Boot 2.3.x 分层构建 Docker 镜像实战"></p> <h3><a id="3_541" rel="nofollow"></a><strong>3、总结</strong></h3> <p>上面进行了使用 SpringBoot2.3.x 分层的方式构建镜像与普通的方式构建镜像，在镜像的构建、推送、拉取方面进行了执行速度对比，总结出如下结论：</p> <ul> <li><strong>镜像构建：</strong> 在构建上，使用分层 Jar 构建镜像可能比普通方式构建镜像更繁琐，所以也更耗时，故而在构建上分层 Jar 构建镜像没有太多优势。</li> <li><strong>镜像推送：</strong> 在推送上，如果每次构建镜像都只是修改构建镜像项目的源码，使用分层 Jar 构建镜像，可以大大加快镜像推送速度。</li> <li>如果是修改构建镜像项目中的依赖包，则和普通构建一样速度很慢。</li> <li><strong>镜像拉取：</strong> 拉取和推送类似，如果只修改构建镜像项目的源码，只会拉取源码相关的中间层镜像，该层非常小（一般几百KB），拉取速度自然非常快。</li> </ul> <p>而对构建镜像项目的依赖包进行变动（增加依赖、删除依赖、修改依赖版本等），则会和普通方式构建镜像一样，拉取速度很慢，这是因为依赖包层是中间层镜像最大的一层（一般在10MB~200MB之间），如果该层发生变动则整个层会进行重新拉取，这样速度自然会很慢。</p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-21980.htm">动物医院管理制度清单（动物医院管理制度清单表）</a></p>
                                        <p>下一个：<a href="/news/article-22449.htm">戴尔成就bios设置ssd启动项（戴尔最新bios设置ssd）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-19-node-share.htm" title="11月19日→21.9M/S|2024年最新免费节点Clash Xray订阅链接地址">11月19日→21.9M/S|2024年最新免费节点Clash Xray订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-30-free-node-subscribe-links.htm" title="9月30日→18.6M/S|2024年最新免费节点Clash Xray订阅链接地址">9月30日→18.6M/S|2024年最新免费节点Clash Xray订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-24286.htm" title="VMware ESXi安装NVIDIA GPU显卡硬件驱动和配置vGPU">VMware ESXi安装NVIDIA GPU显卡硬件驱动和配置vGPU</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-25-winxray-node.htm" title="11月25日→21.9M/S|2024年最新免费节点Clash Xray订阅链接地址">11月25日→21.9M/S|2024年最新免费节点Clash Xray订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-18-today-winxray-node.htm" title="10月18日→22.3M/S|2024年最新免费节点Clash Xray订阅链接地址">10月18日→22.3M/S|2024年最新免费节点Clash Xray订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-21535.htm" title="免费领养宠物正规网站平台推荐下载（免费领养宠物正规网站平台推荐下载大全）">免费领养宠物正规网站平台推荐下载（免费领养宠物正规网站平台推荐下载大全）</a></li>
                        <li class="py-2"><a href="/news/article-27079.htm" title="在拦截器中获取 url 路径里面 @PathVariable 的参数值">在拦截器中获取 url 路径里面 @PathVariable 的参数值</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-31-free-subscribe-node.htm" title="10月31日→18.3M/S|2024年最新免费节点Clash Xray订阅链接地址">10月31日→18.3M/S|2024年最新免费节点Clash Xray订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-20154.htm" title="给动物注射疫苗时应如何防止病毒的干扰现象（动物防疫注射注意事项）">给动物注射疫苗时应如何防止病毒的干扰现象（动物防疫注射注意事项）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-22-winxray-github.htm" title="11月22日→18.8M/S|2024年最新免费节点Clash Xray订阅链接地址">11月22日→18.8M/S|2024年最新免费节点Clash Xray订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">57</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">19</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- End About Us -->
        <!-- Footer Area -->
    <footer class="footer">
        <!-- Copyright -->
        <div class="copyright">
            <div class="container">
                <div class="row">
                    <div class="col-xs-12">
                        <div class="copyright-content">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            <p>
                                <a href="/">Clash Xray免费机场节点分享官网</a> 版权所有 Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Copyright -->
    </footer>
    <!-- End Footer Area -->
    <!-- Jquery JS -->
    <script src="/assets/website/js/frontend/clashxray/jquery.min.js"></script>
    <!-- Bootstrap Js -->
    <script src="/assets/website/js/frontend/clashxray/bootstrap.min.js"></script>
    <!-- Slicknav Js  -->
    <script src="/assets/website/js/frontend/clashxray/jquery.slicknav.min.js"></script>
    <!-- ScrollUp Js -->
    <script src="/assets/website/js/frontend/clashxray/jquery.scrollUp.min.js"></script>
    <!-- Carousel Js -->
    <script src="/assets/website/js/frontend/clashxray/owl.carousel.min.js"></script>
    <!-- Waypoints Js -->
    <script src="/assets/website/js/frontend/clashxray/waypoints.min.js"></script>
    <!--Counterup Js  -->
    <script src="/assets/website/js/frontend/clashxray/jquery.counterup.min.js"></script>
    <!-- Stellar Js  -->
    <script src="/assets/website/js/frontend/clashxray/jquery.stellar.min.js"></script>
    <!-- Min Js -->
    <script src="/assets/website/js/frontend/clashxray/wow.min.js"></script>
    <!-- Animate-Text Js -->
    <script src="/assets/website/js/frontend/clashxray/animate-text.js"></script>
    <!-- Easing Js -->
    <script src="/assets/website/js/frontend/clashxray/easing.min.js"></script>
    <!-- Magnific Js -->
    <script src="/assets/website/js/frontend/clashxray/jquery.magnific-popup.min.js"></script>
    <!-- Particales Js -->
    <script src="/assets/website/js/frontend/clashxray/particles.min.js"></script>
    <!-- Particales-Code Js -->
    <script src="/assets/website/js/frontend/clashxray/particle-code.js"></script>
    <!-- Main Js -->
    <script src="/assets/website/js/frontend/clashxray/main.js"></script>
    <!-- Custom Js -->
    <script src="/assets/website/js/frontend/clashxray/custom.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>